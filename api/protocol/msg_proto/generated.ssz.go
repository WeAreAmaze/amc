// Code generated by fastssz. DO NOT EDIT.
// Hash: 044766a94a542341522d9184e27e4e8f9722d3b6c6b2174da372e63e40c9c5b6
package msg_proto

import (
	types_pb "github.com/amazechain/amc/api/protocol/types_pb"
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the Status object
func (s *Status) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the Status object to a target array
func (s *Status) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'GenesisHash'
	if s.GenesisHash == nil {
		s.GenesisHash = new(types_pb.H256)
	}
	if dst, err = s.GenesisHash.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'CurrentHeight'
	if s.CurrentHeight == nil {
		s.CurrentHeight = new(types_pb.H256)
	}
	if dst, err = s.CurrentHeight.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Status object
func (s *Status) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 64 {
		return ssz.ErrSize
	}

	// Field (0) 'GenesisHash'
	if s.GenesisHash == nil {
		s.GenesisHash = new(types_pb.H256)
	}
	if err = s.GenesisHash.UnmarshalSSZ(buf[0:32]); err != nil {
		return err
	}

	// Field (1) 'CurrentHeight'
	if s.CurrentHeight == nil {
		s.CurrentHeight = new(types_pb.H256)
	}
	if err = s.CurrentHeight.UnmarshalSSZ(buf[32:64]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Status object
func (s *Status) SizeSSZ() (size int) {
	size = 64
	return
}

// HashTreeRoot ssz hashes the Status object
func (s *Status) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the Status object with a hasher
func (s *Status) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'GenesisHash'
	if err = s.GenesisHash.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'CurrentHeight'
	if err = s.CurrentHeight.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}
