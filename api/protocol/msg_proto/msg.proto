// Copyright 2022 The AmazeChain Authors
// This file is part of the AmazeChain library.
//
// The AmazeChain library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The AmazeChain library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the AmazeChain library. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package msg_proto;

import "types_pb/types.proto";
option go_package = "github.com/amazechain/amc/api/protocol/msg_proto";

message MessageData {
  string clientVersion = 2; //client version
  int64  timestamp = 3; //unix time
  string id = 4; // message id hash256(payload)
  string nodeID = 5; //id of peer that created the message, not the peer that may have send it.
  bytes nodePubKey = 6; // peer public key
  bytes sign = 7; // signature of message data
  bytes payload = 8; // payload
  bool gossip = 9;
}

message NewBlockMessageData {
  types_pb.H256 hash = 1 ;
  types_pb.H256 Number = 2;
  types_pb.Block block = 3;
}

message ProtocolHandshakeMessage {
  string version = 1;
  types_pb.H256 genesisHash = 2;
  types_pb.H256 currentHeight = 3;
}


//v2
message Status {
  string version = 1;
  types_pb.H256 genesisHash = 2;
  types_pb.H256 currentHeight = 3;
}

// todo
message Metadata {
  string version = 1;
}

message TopicScoreSnapshot {
  // Time a peer has spent in the gossip mesh.
  uint64 time_in_mesh = 1;
  // This is the number of first message deliveries in the topic.
  float first_message_deliveries = 2;
  // This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of
  // message validation.It effectively tracks first and near-first
  // deliveries, ie a message seen from a mesh peer before we have forwarded it to them.
  float mesh_message_deliveries = 3;
  // This is the number of invalid messages in the topic from the peer.
  float invalid_message_deliveries = 4;
}
