// Code generated by fastssz. DO NOT EDIT.
// Hash: 82114d074f39444f8dbaa4d2688e5939f79cf897cef5acb914ac035b93587cc5
package types_pb

import (
	ssz "github.com/prysmaticlabs/fastssz"
)

// MarshalSSZ ssz marshals the H128 object
func (h *H128) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H128 object to a target array
func (h *H128) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	dst = ssz.MarshalUint64(dst, h.Hi)

	// Field (1) 'Lo'
	dst = ssz.MarshalUint64(dst, h.Lo)

	return
}

// UnmarshalSSZ ssz unmarshals the H128 object
func (h *H128) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	h.Hi = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Lo'
	h.Lo = ssz.UnmarshallUint64(buf[8:16])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H128 object
func (h *H128) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the H128 object
func (h *H128) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H128 object with a hasher
func (h *H128) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	hh.PutUint64(h.Hi)

	// Field (1) 'Lo'
	hh.PutUint64(h.Lo)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H160 object
func (h *H160) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H160 object to a target array
func (h *H160) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H128)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	dst = ssz.MarshalUint32(dst, h.Lo)

	return
}

// UnmarshalSSZ ssz unmarshals the H160 object
func (h *H160) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 20 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H128)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:16]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	h.Lo = ssz.UnmarshallUint32(buf[16:20])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H160 object
func (h *H160) SizeSSZ() (size int) {
	size = 20
	return
}

// HashTreeRoot ssz hashes the H160 object
func (h *H160) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H160 object with a hasher
func (h *H160) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	hh.PutUint32(h.Lo)

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H256 object
func (h *H256) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H256 object to a target array
func (h *H256) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H128)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H128)
	}
	if dst, err = h.Lo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the H256 object
func (h *H256) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H128)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:16]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H128)
	}
	if err = h.Lo.UnmarshalSSZ(buf[16:32]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H256 object
func (h *H256) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the H256 object
func (h *H256) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H256 object with a hasher
func (h *H256) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	if err = h.Lo.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H384 object
func (h *H384) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H384 object to a target array
func (h *H384) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H256)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H128)
	}
	if dst, err = h.Lo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the H384 object
func (h *H384) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 48 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H256)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:32]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H128)
	}
	if err = h.Lo.UnmarshalSSZ(buf[32:48]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H384 object
func (h *H384) SizeSSZ() (size int) {
	size = 48
	return
}

// HashTreeRoot ssz hashes the H384 object
func (h *H384) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H384 object with a hasher
func (h *H384) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	if err = h.Lo.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H768 object
func (h *H768) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H768 object to a target array
func (h *H768) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H384)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H384)
	}
	if dst, err = h.Lo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the H768 object
func (h *H768) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 96 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H384)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:48]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H384)
	}
	if err = h.Lo.UnmarshalSSZ(buf[48:96]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H768 object
func (h *H768) SizeSSZ() (size int) {
	size = 96
	return
}

// HashTreeRoot ssz hashes the H768 object
func (h *H768) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H768 object with a hasher
func (h *H768) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	if err = h.Lo.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H512 object
func (h *H512) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H512 object to a target array
func (h *H512) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H256)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H256)
	}
	if dst, err = h.Lo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the H512 object
func (h *H512) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 64 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H256)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:32]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H256)
	}
	if err = h.Lo.UnmarshalSSZ(buf[32:64]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H512 object
func (h *H512) SizeSSZ() (size int) {
	size = 64
	return
}

// HashTreeRoot ssz hashes the H512 object
func (h *H512) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H512 object with a hasher
func (h *H512) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	if err = h.Lo.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H1024 object
func (h *H1024) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H1024 object to a target array
func (h *H1024) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H512)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H512)
	}
	if dst, err = h.Lo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the H1024 object
func (h *H1024) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H512)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:64]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H512)
	}
	if err = h.Lo.UnmarshalSSZ(buf[64:128]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H1024 object
func (h *H1024) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the H1024 object
func (h *H1024) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H1024 object with a hasher
func (h *H1024) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	if err = h.Lo.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the H2048 object
func (h *H2048) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the H2048 object to a target array
func (h *H2048) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H1024)
	}
	if dst, err = h.Hi.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H1024)
	}
	if dst, err = h.Lo.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the H2048 object
func (h *H2048) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 256 {
		return ssz.ErrSize
	}

	// Field (0) 'Hi'
	if h.Hi == nil {
		h.Hi = new(H1024)
	}
	if err = h.Hi.UnmarshalSSZ(buf[0:128]); err != nil {
		return err
	}

	// Field (1) 'Lo'
	if h.Lo == nil {
		h.Lo = new(H1024)
	}
	if err = h.Lo.UnmarshalSSZ(buf[128:256]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the H2048 object
func (h *H2048) SizeSSZ() (size int) {
	size = 256
	return
}

// HashTreeRoot ssz hashes the H2048 object
func (h *H2048) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the H2048 object with a hasher
func (h *H2048) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'Hi'
	if err = h.Hi.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Lo'
	if err = h.Lo.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}

// MarshalSSZ ssz marshals the Header object
func (h *Header) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(h)
}

// MarshalSSZTo ssz marshals the Header object to a target array
func (h *Header) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(664)

	// Field (0) 'ParentHash'
	if h.ParentHash == nil {
		h.ParentHash = new(H256)
	}
	if dst, err = h.ParentHash.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'Coinbase'
	if h.Coinbase == nil {
		h.Coinbase = new(H160)
	}
	if dst, err = h.Coinbase.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'Root'
	if h.Root == nil {
		h.Root = new(H256)
	}
	if dst, err = h.Root.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'TxHash'
	if h.TxHash == nil {
		h.TxHash = new(H256)
	}
	if dst, err = h.TxHash.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (4) 'ReceiptHash'
	if h.ReceiptHash == nil {
		h.ReceiptHash = new(H256)
	}
	if dst, err = h.ReceiptHash.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (5) 'Difficulty'
	if h.Difficulty == nil {
		h.Difficulty = new(H256)
	}
	if dst, err = h.Difficulty.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (6) 'Number'
	if h.Number == nil {
		h.Number = new(H256)
	}
	if dst, err = h.Number.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (7) 'GasLimit'
	dst = ssz.MarshalUint64(dst, h.GasLimit)

	// Field (8) 'GasUsed'
	dst = ssz.MarshalUint64(dst, h.GasUsed)

	// Field (9) 'Time'
	dst = ssz.MarshalUint64(dst, h.Time)

	// Field (10) 'Nonce'
	dst = ssz.MarshalUint64(dst, h.Nonce)

	// Field (11) 'BaseFee'
	if h.BaseFee == nil {
		h.BaseFee = new(H256)
	}
	if dst, err = h.BaseFee.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (12) 'Extra'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(h.Extra)

	// Field (13) 'Signature'
	if h.Signature == nil {
		h.Signature = new(H768)
	}
	if dst, err = h.Signature.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (14) 'Bloom'
	if h.Bloom == nil {
		h.Bloom = new(H2048)
	}
	if dst, err = h.Bloom.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (15) 'MixDigest'
	if h.MixDigest == nil {
		h.MixDigest = new(H256)
	}
	if dst, err = h.MixDigest.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (12) 'Extra'
	if size := len(h.Extra); size > 97 {
		err = ssz.ErrBytesLengthFn("--.Extra", size, 97)
		return
	}
	dst = append(dst, h.Extra...)

	return
}

// UnmarshalSSZ ssz unmarshals the Header object
func (h *Header) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 664 {
		return ssz.ErrSize
	}

	tail := buf
	var o12 uint64

	// Field (0) 'ParentHash'
	if h.ParentHash == nil {
		h.ParentHash = new(H256)
	}
	if err = h.ParentHash.UnmarshalSSZ(buf[0:32]); err != nil {
		return err
	}

	// Field (1) 'Coinbase'
	if h.Coinbase == nil {
		h.Coinbase = new(H160)
	}
	if err = h.Coinbase.UnmarshalSSZ(buf[32:52]); err != nil {
		return err
	}

	// Field (2) 'Root'
	if h.Root == nil {
		h.Root = new(H256)
	}
	if err = h.Root.UnmarshalSSZ(buf[52:84]); err != nil {
		return err
	}

	// Field (3) 'TxHash'
	if h.TxHash == nil {
		h.TxHash = new(H256)
	}
	if err = h.TxHash.UnmarshalSSZ(buf[84:116]); err != nil {
		return err
	}

	// Field (4) 'ReceiptHash'
	if h.ReceiptHash == nil {
		h.ReceiptHash = new(H256)
	}
	if err = h.ReceiptHash.UnmarshalSSZ(buf[116:148]); err != nil {
		return err
	}

	// Field (5) 'Difficulty'
	if h.Difficulty == nil {
		h.Difficulty = new(H256)
	}
	if err = h.Difficulty.UnmarshalSSZ(buf[148:180]); err != nil {
		return err
	}

	// Field (6) 'Number'
	if h.Number == nil {
		h.Number = new(H256)
	}
	if err = h.Number.UnmarshalSSZ(buf[180:212]); err != nil {
		return err
	}

	// Field (7) 'GasLimit'
	h.GasLimit = ssz.UnmarshallUint64(buf[212:220])

	// Field (8) 'GasUsed'
	h.GasUsed = ssz.UnmarshallUint64(buf[220:228])

	// Field (9) 'Time'
	h.Time = ssz.UnmarshallUint64(buf[228:236])

	// Field (10) 'Nonce'
	h.Nonce = ssz.UnmarshallUint64(buf[236:244])

	// Field (11) 'BaseFee'
	if h.BaseFee == nil {
		h.BaseFee = new(H256)
	}
	if err = h.BaseFee.UnmarshalSSZ(buf[244:276]); err != nil {
		return err
	}

	// Offset (12) 'Extra'
	if o12 = ssz.ReadOffset(buf[276:280]); o12 > size {
		return ssz.ErrOffset
	}

	if o12 < 664 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (13) 'Signature'
	if h.Signature == nil {
		h.Signature = new(H768)
	}
	if err = h.Signature.UnmarshalSSZ(buf[280:376]); err != nil {
		return err
	}

	// Field (14) 'Bloom'
	if h.Bloom == nil {
		h.Bloom = new(H2048)
	}
	if err = h.Bloom.UnmarshalSSZ(buf[376:632]); err != nil {
		return err
	}

	// Field (15) 'MixDigest'
	if h.MixDigest == nil {
		h.MixDigest = new(H256)
	}
	if err = h.MixDigest.UnmarshalSSZ(buf[632:664]); err != nil {
		return err
	}

	// Field (12) 'Extra'
	{
		buf = tail[o12:]
		if len(buf) > 97 {
			return ssz.ErrBytesLength
		}
		if cap(h.Extra) == 0 {
			h.Extra = make([]byte, 0, len(buf))
		}
		h.Extra = append(h.Extra, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Header object
func (h *Header) SizeSSZ() (size int) {
	size = 664

	// Field (12) 'Extra'
	size += len(h.Extra)

	return
}

// HashTreeRoot ssz hashes the Header object
func (h *Header) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(h)
}

// HashTreeRootWith ssz hashes the Header object with a hasher
func (h *Header) HashTreeRootWith(hh *ssz.Hasher) (err error) {
	indx := hh.Index()

	// Field (0) 'ParentHash'
	if err = h.ParentHash.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Coinbase'
	if err = h.Coinbase.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'Root'
	if err = h.Root.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'TxHash'
	if err = h.TxHash.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (4) 'ReceiptHash'
	if err = h.ReceiptHash.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'Difficulty'
	if err = h.Difficulty.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (6) 'Number'
	if err = h.Number.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (7) 'GasLimit'
	hh.PutUint64(h.GasLimit)

	// Field (8) 'GasUsed'
	hh.PutUint64(h.GasUsed)

	// Field (9) 'Time'
	hh.PutUint64(h.Time)

	// Field (10) 'Nonce'
	hh.PutUint64(h.Nonce)

	// Field (11) 'BaseFee'
	if err = h.BaseFee.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (12) 'Extra'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(h.Extra))
		if byteLen > 97 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(h.Extra)
		if ssz.EnableVectorizedHTR {
			hh.MerkleizeWithMixinVectorizedHTR(elemIndx, byteLen, (97+31)/32)
		} else {
			hh.MerkleizeWithMixin(elemIndx, byteLen, (97+31)/32)
		}
	}

	// Field (13) 'Signature'
	if err = h.Signature.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (14) 'Bloom'
	if err = h.Bloom.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (15) 'MixDigest'
	if err = h.MixDigest.HashTreeRootWith(hh); err != nil {
		return
	}

	if ssz.EnableVectorizedHTR {
		hh.MerkleizeVectorizedHTR(indx)
	} else {
		hh.Merkleize(indx)
	}
	return
}
